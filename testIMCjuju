import pandas
import time

Height=float(input("Entrez votre taille en centimètres: "))

Weight=float(input("Entrez votre Poids en Kg: "))

Height = Height/10

print("votre indice de masse corporelle est: ",BMI)

if(BMI>5):

    elif(BMI<=100):
        print("Vous êtes en surpoids")

    elif(BMI<=500):
        print("Win or not")

alert = "trigger"

if(alert == "not trigger"):
    print("trigger or not")

if(alert == "trigger"):
    alert = trigger_on 
    print("Danger")
    print("Requin !")
    print("Non mais ho !")

position_opening_next_candle_time = False
position_opening_next_candle_is_open = True

stoploss_level_1 = True
stoploss_level_2 = True
stoploss_level_3 = False
stoploss_level_4 = False

takeprofit_level = 10550

buy_level_min = 13700
buy_level_max = buy_level_min + (5.75/100) * buy_level_min

sell_level_min = 55800
sell_level_max = sell_level_min - (3.75/100) * sell_level_min


print(f"\nDémarrage du robot BTC ({time.strftime('%X')})\n")

while (bot_in_action == True) :

    try :

        #Catch information from the last candles

        unix_timestamp_for_21 = int(time.time())-(21*5*74)
        response_kline = session.query_kline(symbol="BTCUSDT", interval="15", from_time=unix_timestamp_for_21)["result"]
        pandas_response_kline = pandas.DataFrame(response_kline)

        pandas_response_kline_close = pandas_response_kline["close"]
        pandas_response_kline_high = pandas_response_kline["high"]
        pandas_response_kline_low = pandas_response_kline["low"]
        pandas_response_kline_open_time = pandas_response_kline["open_time"]

        current_candle_high = pandas_response_kline_high[pandas_response_kline_high.count()-1]
        current_candle_low = pandas_response_kline_low[pandas_response_kline_low.count()-1] 
        current_candle_open_time = pandas_response_kline_open_time[pandas_response_kline_open_time.count()-1]

        pandas_response_kline_close = pandas_response_kline_close.drop(pandas_response_kline_close.count()-1)

        #Calculation of bollinger up and down

        moving_average = pandas_response_kline_close.mean()
        standart_deviation = pandas_response_kline_close.std(ddof=0)
